1.What is the role of the Startup.cs class? Explain with example. 

The Startup class contains the ConfigureServices and Configure methods. While the former is used to configure the required services, 
the latter is used to configure the request processing pipeline. The Configure method is executed immediately after the ConfigureServices method.

---------------------------------------------------------------------------------------------------------------------------------------------------

2.Explain the complete request processing pipeline in ASP.NET Core MVC

The ASP.NET Core request processing pipeline consists of a sequence of middleware components that are going to be called one after the other. 
Each middleware component can perform some operations before and after invoking the next component using the next method.
A middleware component can also decide not to call the next middleware component which is called short-circuiting the request pipeline.
The middleware component in asp.net core has access to both the incoming request and the outgoing response.
The most important point that you need to keep in mind is the order in which the middleware components are added in the 
Configure method of the Startup class defines the order in which these middleware components are going to be invoked on 
requests and the reverse order for the response. So, the order is critical for defining the security, performance, and functionality of the application.

https://dotnettutorials.net/lesson/asp-net-core-request-processing-pipeline/#:~:text=The%20ASP.NET%20Core%20request%20processing%20pipeline%20consists%20of
%20a,component%20using%20the%20next%20method.

----------------------------------------------------------------------------------------------------------------------------------------------------

3.What problems does Dependency Injection solve?

The goal of the dependency injection technique is to remove this dependency by separating the usage from the creation of the object. 
This reduces the amount of required boilerplate code and improves flexibility.
Dependency injection helps to develop testable code, allowing developers to write unit tests easily. You can use mock databases with dependency injection,
and test your application without affecting the actual database.

---------------------------------------------------------------------------------------------------------------------------------------------------------

4.Describe the service lifetimes

The service lifetime controls how long a result object will live for after it has been created by the container. The lifetime can be created by using the 
appropriate extension method on the IServiceColletion when registering the service.”

In ASP.NET Core, the lifetime of a scope is equivalent to the lifetime of an HTTP request. Services registered with a scoped lifetime will be maintained 
and used during the lifetime of the scope (or HTTP request) they have been created in.

------------------------------------------------------------------------------------------------------------------------------------------------------

5.What is request delegate?

Request delegates are used to build the request pipeline. The request delegates handle each HTTP request. 
Request delegates are configured using Run, Map, and Use extension methods.

------------------------------------------------------------------------------------------------------------------------------------------------------

6.Explain the various configuration providers in ASP.NET Core

When we create an ASP.NET Core application from a template we’re presented by a configuration in form of a JSON file appsetting.json. This file is 
commonly used to configure ASP.NET Core applications and there’s absolutely nothing wrong with it.

File configuration provider (default)
Secret Manager (default)
Environment Variables configuration provider (default)
Command-line configuration provider (default)
Memory configuration provider
Azure Key Vault configuration provider
Azure App configuration provider
Key-per-file configuration provider
Custom configuration provider

----------------------------------------------------------------------------------------------------------------------------------------------------

7.What is In-memory cache?

Caching is a technique of storing frequently used data/information in memory, so that, when the same data/information is needed next time, 
it could be directly retrieved from the memory instead of being generated by the application.

Caching enables you to store data in memory for rapid access. When the data is accessed again, applications can get the data from the cache instead of 
retrieving it from the original source. This can improve performance and scalability.

--------------------------------------------------------------------------------------------------------------------------------------------------
8.How to prevent Cross-Site Scripting (XSS) in ASP.NET Core?

Cross-Site Scripting (XSS) is a security vulnerability which enables an attacker to place client side scripts (usually JavaScript) into web pages. 
When other users load affected pages the attacker's scripts will run, enabling the attacker to steal cookies and session tokens, 
change the contents of the web page through DOM manipulation or redirect the browser to another page. 
XSS vulnerabilities generally occur when an application takes user input and outputs it to a page without validating, encoding or escaping it.

Never put untrusted data into your HTML input, unless you follow the rest of the steps below. 
Untrusted data is any data that may be controlled by an attacker, HTML form inputs, query strings, HTTP headers, 
even data sourced from a database as an attacker may be able to breach your database even if they cannot breach your application.

Before putting untrusted data inside an HTML element ensure it's HTML encoded. 
HTML encoding takes characters such as < and changes them into a safe form like &lt;

Before putting untrusted data into an HTML attribute ensure it's HTML encoded. 
HTML attribute encoding is a superset of HTML encoding and encodes additional characters such as " and '.

Before putting untrusted data into JavaScript place the data in an HTML element whose 
contents you retrieve at runtime. If this isn't possible, then ensure the data is JavaScript encoded. 
JavaScript encoding takes dangerous characters for JavaScript and replaces them with their hex, for example < would be encoded as \u003C.

Before putting untrusted data into a URL query string ensure it's URL encoded

-------------------------------------------------------------------------------------------------------------------------------------------------

9.Explain View-Model with an example. 

https://stackoverflow.com/questions/11064316/what-is-viewmodel-in-mvc

----------------------------------------------------------------------------------------------------------------------------------------------------

10.Describe Attribute based routing

Routing is how ASP.NET MVC matches a URI to an action. MVC 5 supports a new type of routing, called attribute routing. 
As the name implies, attribute routing uses attributes to define routes. Attribute routing gives you more control over the URIs in your web application.

The earlier style of routing, called convention-based routing, is still fully supported. In fact, you can combine both techniques in the same project.

https://devblogs.microsoft.com/dotnet/attribute-routing-in-asp-net-mvc-5/#:~:text=As%20the%20name%20implies%2C%20attribute,techniques%20in%20the%20same%20project.

---------------------------------------------------------------------------------------------------------------------------------------------

11.How does ASP.NET Core support dependency injection into views?

ASP.NET Core supports dependency injection into views. This can be useful for view-specific services, 
such as localization or data required only for populating view elements.

https://learn.microsoft.com/en-us/aspnet/core/mvc/views/dependency-injection?view=aspnetcore-7.0

---------------------------------------------------------------------------------------------------------------------------------------------

12.Differentiate between launchSettings.json and appSettings.json

What is launchSettings. json﻿ launchSettings. json, which is placed in the Properties folder of a project, describes how the application can be launched — the command to execute, 
whether the browser should be opened, which environment variables should be set, and so on

The appsettings. json file is generally used to store the application configuration settings such as 
database connection strings, any application scope global variables, and much other information.

--------------------------------------------------------------------------------------------------------------------------------------------------

13.What are Tag Helpers?

A Tag Helper Component is a Tag Helper that allows you to conditionally modify or add HTML elements from server-side code. 
This feature is available in ASP.NET Core 2.0 or later. ASP.NET Core includes 
two built-in Tag Helper Components: head and body . They're located in the Microsoft. AspNetCore.

It is a feature provided by the Razor view engine that enables us to write server-side code to create and render the HTML element in view (Razor). 
The tag-helper is a C# class that is used to generate the view by adding the HTML element.

---------------------------------------------------------------------------------------------------------------------------------------------------

14.what is response caching in .net core

Response caching reduces the number of requests a client or proxy makes to a web server. 
Response caching also reduces the amount of work the web server performs to generate a response. Response caching is controlled by 
headers that specify how you want client, proxy, and middleware to cache responses.

------------------------------------------------------------------------------------------------------------------------------------------------

15.Differentiate between ViewBag and ViewData with examples

https://www.c-sharpcorner.com/blogs/viewdata-vs-viewbag-vs-tempdata-in-mvc1

---------------------------------------------------------------------------------------------------------------------------------------------------

16.difference between app.Use vs app.Run while adding middleware

For app. Run , it adds a terminal middleware delegate to the application's request pipeline. For app. Use , 
it adds a middleware delegate to the application's request pipeline.

https://stackoverflow.com/questions/58432973/what-are-the-difference-using-app-run-and-app-useendpoints-in-
asp-net-core#:~:text=For%20app.,to%20the%20application's%20request%20pipeline.

-------------------------------------------------------------------------------------------------------------------------------------------------------

17.What does WebHost.CreateDefaultBuilder() do?

Initializes a new instance of the WebHostBuilder class with pre-configured defaults.

It is use to build up the HTTP pipeline via webHostBuilder.

-------------------------------------------------------------------------------------------------------------------------------------------------------

18.What is the role of IHostingEnvironment interface in ASP.NET Core?

The IHostingEnvironment is an interface for . Net Core 2.0. The IHostingEnvironment interface need to be injected as dependency 
in the Controller and then later used throughout the Controller. 
The IHostingEnvironment interface have two properties.

Provides information about the web hosting environment an application is running in.

------------------------------------------------------------------------------------------------------------------------------------------------------

19.What is CTS in .Net core?

The Common Type System (CTS) is a standard for defining and using data types in the . NETframework. 
CTS defines a collection of data types, which are used and managed by the run time to 
facilitate cross-language integration. CTS provides the types in the . NET Framework with which .

---------------------------------------------------------------------------------------------------------------------------------------------------------

20.Difference between ConfigureServices and Configure Method in Startup class

Use ConfigureServices method to add services to the container.

Use Configure method to configure the HTTP request pipeline.

ConfigureServices method gets call runtime to register services to DI container. After registering the dependent classes, 
you can use those classes anywhere in the application. 
The ConfigureServices method includes the IServiceCollection parameter to register services to the DI container

Configure the method gets call runtime to configure the HTTP request pipeline for application. 
Configure use the instance of the IApplicationBuilder that is provided by In-Build IOC container. 
In other words, you add the middleware in this method like routing and other custom middleware as per your application requirements


































The Startup class contains the ConfigureServices and Configure methods. While the former is used to configure the required services, 
the latter is used to configure the request processing pipeline. The Configure method is executed immediately after the ConfigureServices method.

---------------------------------------------------------------------------------------------------------------------------------------------------

2.Explain the complete request processing pipeline in ASP.NET Core MVC

The ASP.NET Core request processing pipeline consists of a sequence of middleware components that are going to be called one after the other. 
Each middleware component can perform some operations before and after invoking the next component using the next method.
A middleware component can also decide not to call the next middleware component which is called short-circuiting the request pipeline.
The middleware component in asp.net core has access to both the incoming request and the outgoing response.
The most important point that you need to keep in mind is the order in which the middleware components are added in the 
Configure method of the Startup class defines the order in which these middleware components are going to be invoked on 
requests and the reverse order for the response. So, the order is critical for defining the security, performance, and functionality of the application.

https://dotnettutorials.net/lesson/asp-net-core-request-processing-pipeline/#:~:text=The%20ASP.NET%20Core%20request%20processing%20pipeline%20consists%20of
%20a,component%20using%20the%20next%20method.

----------------------------------------------------------------------------------------------------------------------------------------------------

3.What problems does Dependency Injection solve?

The goal of the dependency injection technique is to remove this dependency by separating the usage from the creation of the object. 
This reduces the amount of required boilerplate code and improves flexibility.
Dependency injection helps to develop testable code, allowing developers to write unit tests easily. You can use mock databases with dependency injection,
and test your application without affecting the actual database.

---------------------------------------------------------------------------------------------------------------------------------------------------------

4.Describe the service lifetimes

The service lifetime controls how long a result object will live for after it has been created by the container. The lifetime can be created by using the 
appropriate extension method on the IServiceColletion when registering the service.”

In ASP.NET Core, the lifetime of a scope is equivalent to the lifetime of an HTTP request. Services registered with a scoped lifetime will be maintained 
and used during the lifetime of the scope (or HTTP request) they have been created in.

------------------------------------------------------------------------------------------------------------------------------------------------------

5.What is request delegate?

Request delegates are used to build the request pipeline. The request delegates handle each HTTP request. 
Request delegates are configured using Run, Map, and Use extension methods.

------------------------------------------------------------------------------------------------------------------------------------------------------

6.Explain the various configuration providers in ASP.NET Core

When we create an ASP.NET Core application from a template we’re presented by a configuration in form of a JSON file appsetting.json. This file is 
commonly used to configure ASP.NET Core applications and there’s absolutely nothing wrong with it.

File configuration provider (default)
Secret Manager (default)
Environment Variables configuration provider (default)
Command-line configuration provider (default)
Memory configuration provider
Azure Key Vault configuration provider
Azure App configuration provider
Key-per-file configuration provider
Custom configuration provider

----------------------------------------------------------------------------------------------------------------------------------------------------

7.What is In-memory cache?

Caching is a technique of storing frequently used data/information in memory, so that, when the same data/information is needed next time, 
it could be directly retrieved from the memory instead of being generated by the application.

Caching enables you to store data in memory for rapid access. When the data is accessed again, applications can get the data from the cache instead of 
retrieving it from the original source. This can improve performance and scalability.

--------------------------------------------------------------------------------------------------------------------------------------------------
8.How to prevent Cross-Site Scripting (XSS) in ASP.NET Core?

Cross-Site Scripting (XSS) is a security vulnerability which enables an attacker to place client side scripts (usually JavaScript) into web pages. 
When other users load affected pages the attacker's scripts will run, enabling the attacker to steal cookies and session tokens, 
change the contents of the web page through DOM manipulation or redirect the browser to another page. 
XSS vulnerabilities generally occur when an application takes user input and outputs it to a page without validating, encoding or escaping it.

Never put untrusted data into your HTML input, unless you follow the rest of the steps below. 
Untrusted data is any data that may be controlled by an attacker, HTML form inputs, query strings, HTTP headers, 
even data sourced from a database as an attacker may be able to breach your database even if they cannot breach your application.

Before putting untrusted data inside an HTML element ensure it's HTML encoded. 
HTML encoding takes characters such as < and changes them into a safe form like &lt;

Before putting untrusted data into an HTML attribute ensure it's HTML encoded. 
HTML attribute encoding is a superset of HTML encoding and encodes additional characters such as " and '.

Before putting untrusted data into JavaScript place the data in an HTML element whose 
contents you retrieve at runtime. If this isn't possible, then ensure the data is JavaScript encoded. 
JavaScript encoding takes dangerous characters for JavaScript and replaces them with their hex, for example < would be encoded as \u003C.

Before putting untrusted data into a URL query string ensure it's URL encoded

-------------------------------------------------------------------------------------------------------------------------------------------------

9.Explain View-Model with an example. 

https://stackoverflow.com/questions/11064316/what-is-viewmodel-in-mvc

----------------------------------------------------------------------------------------------------------------------------------------------------

10.Describe Attribute based routing

Routing is how ASP.NET MVC matches a URI to an action. MVC 5 supports a new type of routing, called attribute routing. 
As the name implies, attribute routing uses attributes to define routes. Attribute routing gives you more control over the URIs in your web application.

The earlier style of routing, called convention-based routing, is still fully supported. In fact, you can combine both techniques in the same project.

https://devblogs.microsoft.com/dotnet/attribute-routing-in-asp-net-mvc-5/#:~:text=As%20the%20name%20implies%2C%20attribute,techniques%20in%20the%20same%20project.

---------------------------------------------------------------------------------------------------------------------------------------------

11.How does ASP.NET Core support dependency injection into views?

ASP.NET Core supports dependency injection into views. This can be useful for view-specific services, 
such as localization or data required only for populating view elements.

https://learn.microsoft.com/en-us/aspnet/core/mvc/views/dependency-injection?view=aspnetcore-7.0

---------------------------------------------------------------------------------------------------------------------------------------------

12.Differentiate between launchSettings.json and appSettings.json

What is launchSettings. json﻿ launchSettings. json, which is placed in the Properties folder of a project, describes how the application can be launched — the command to execute, 
whether the browser should be opened, which environment variables should be set, and so on

The appsettings. json file is generally used to store the application configuration settings such as 
database connection strings, any application scope global variables, and much other information.

--------------------------------------------------------------------------------------------------------------------------------------------------

13.What are Tag Helpers?

A Tag Helper Component is a Tag Helper that allows you to conditionally modify or add HTML elements from server-side code. 
This feature is available in ASP.NET Core 2.0 or later. ASP.NET Core includes 
two built-in Tag Helper Components: head and body . They're located in the Microsoft. AspNetCore.

It is a feature provided by the Razor view engine that enables us to write server-side code to create and render the HTML element in view (Razor). 
The tag-helper is a C# class that is used to generate the view by adding the HTML element.

---------------------------------------------------------------------------------------------------------------------------------------------------

14.what is response caching in .net core

Response caching reduces the number of requests a client or proxy makes to a web server. 
Response caching also reduces the amount of work the web server performs to generate a response. Response caching is controlled by 
headers that specify how you want client, proxy, and middleware to cache responses.

------------------------------------------------------------------------------------------------------------------------------------------------

15.Differentiate between ViewBag and ViewData with examples

https://www.c-sharpcorner.com/blogs/viewdata-vs-viewbag-vs-tempdata-in-mvc1

---------------------------------------------------------------------------------------------------------------------------------------------------

16.difference between app.Use vs app.Run while adding middleware

For app. Run , it adds a terminal middleware delegate to the application's request pipeline. For app. Use , 
it adds a middleware delegate to the application's request pipeline.

https://stackoverflow.com/questions/58432973/what-are-the-difference-using-app-run-and-app-useendpoints-in-
asp-net-core#:~:text=For%20app.,to%20the%20application's%20request%20pipeline.

-------------------------------------------------------------------------------------------------------------------------------------------------------

17.What does WebHost.CreateDefaultBuilder() do?

Initializes a new instance of the WebHostBuilder class with pre-configured defaults.

It is use to build up the HTTP pipeline via webHostBuilder.

-------------------------------------------------------------------------------------------------------------------------------------------------------

18.What is the role of IHostingEnvironment interface in ASP.NET Core?

The IHostingEnvironment is an interface for . Net Core 2.0. The IHostingEnvironment interface need to be injected as dependency 
in the Controller and then later used throughout the Controller. 
The IHostingEnvironment interface have two properties.

Provides information about the web hosting environment an application is running in.

------------------------------------------------------------------------------------------------------------------------------------------------------

19.What is CTS in .Net core?

The Common Type System (CTS) is a standard for defining and using data types in the . NETframework. 
CTS defines a collection of data types, which are used and managed by the run time to 
facilitate cross-language integration. CTS provides the types in the . NET Framework with which .

---------------------------------------------------------------------------------------------------------------------------------------------------------

20.Difference between ConfigureServices and Configure Method in Startup class

Use ConfigureServices method to add services to the container.

Use Configure method to configure the HTTP request pipeline.

ConfigureServices method gets call runtime to register services to DI container. After registering the dependent classes, 
you can use those classes anywhere in the application. 
The ConfigureServices method includes the IServiceCollection parameter to register services to the DI container

Configure the method gets call runtime to configure the HTTP request pipeline for application. 
Configure use the instance of the IApplicationBuilder that is provided by In-Build IOC container. 
In other words, you add the middleware in this method like routing and other custom middleware as per your application requirements
















































































